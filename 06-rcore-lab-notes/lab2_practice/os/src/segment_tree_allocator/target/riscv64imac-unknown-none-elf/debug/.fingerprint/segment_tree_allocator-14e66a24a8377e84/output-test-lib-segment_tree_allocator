{"message":"can't find crate for `test`","code":{"code":"E0463","explanation":"A plugin/crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\n#![feature(plugin)]\n#![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\nextern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n"},"level":"error","spans":[{"file_name":"src/test.rs","byte_start":113,"byte_end":1216,"line_start":7,"line_end":36,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn test_seg_tree() {","highlight_start":1,"highlight_end":21},{"text":"    let mut root = SegTreeNode::build(0, 63);","highlight_start":1,"highlight_end":46},{"text":"    assert_eq!(root.alloc(63), Some(0));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.alloc(63), None);","highlight_start":1,"highlight_end":38},{"text":"    assert_eq!(root.alloc(1), None);","highlight_start":1,"highlight_end":37},{"text":"    assert_eq!(root.dealloc(0, 63), Some(64));","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    assert_eq!(root.alloc(64), Some(0));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.dealloc(0, 63), Some(64));","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    assert_eq!(root.alloc(32), Some(0));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.alloc(32), Some(32));","highlight_start":1,"highlight_end":42},{"text":"    assert_eq!(root.alloc(32), None);","highlight_start":1,"highlight_end":38},{"text":"    assert_eq!(root.dealloc(0, 32), Some(32));","highlight_start":1,"highlight_end":47},{"text":"    assert_eq!(root.dealloc(32, 32), Some(32));","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    assert_eq!(root.alloc(9), Some(0));","highlight_start":1,"highlight_end":40},{"text":"    assert_eq!(root.alloc(9), Some(16));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.alloc(9), Some(32));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.alloc(9), Some(48));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.alloc(9), None);","highlight_start":1,"highlight_end":37},{"text":"    assert_eq!(root.dealloc(32, 9), Some(16));","highlight_start":1,"highlight_end":47},{"text":"    assert_eq!(root.dealloc(48, 9), Some(16));","highlight_start":1,"highlight_end":47},{"text":"    assert_eq!(root.alloc(32), Some(32));","highlight_start":1,"highlight_end":42},{"text":"    assert_eq!(root.dealloc(16, 9), Some(16));","highlight_start":1,"highlight_end":47},{"text":"    assert_eq!(root.dealloc(0, 9), Some(16));","highlight_start":1,"highlight_end":46},{"text":"    assert_eq!(root.alloc(32), Some(0));","highlight_start":1,"highlight_end":41},{"text":"    assert_eq!(root.dealloc(32, 32), Some(32));","highlight_start":1,"highlight_end":48},{"text":"    assert_eq!(root.dealloc(0, 32), Some(32));","highlight_start":1,"highlight_end":47},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/test.rs","byte_start":105,"byte_end":112,"line_start":6,"line_end":6,"column_start":1,"column_end":8,"is_primary":false,"text":[{"text":"#[test]","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[test]","def_site_span":{"file_name":"/home/wfly/.rustup/toolchains/nightly-2020-06-27-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":45951,"byte_end":46017,"line_start":1377,"line_end":1379,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro test($item:item) {","highlight_start":5,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m: can't find crate for `test`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/test.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn test_seg_tree() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut root = SegTreeNode::build(0, 63);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(root.alloc(63), Some(0));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(root.alloc(63), None);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(root.dealloc(0, 32), Some(32));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't find crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0463`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0463`.\u001b[0m\n"}
